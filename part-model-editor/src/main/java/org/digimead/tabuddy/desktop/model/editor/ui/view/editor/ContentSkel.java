/**
 * This file is part of the TA Buddy project.
 * Copyright (c) 2012-2015 Alexey Aksenov ezh@ezh.msk.ru
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Global License version 3
 * as published by the Free Software Foundation with the addition of the
 * following permission added to Section 15 as permitted in Section 7(a):
 * FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED
 * BY Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS»,
 * Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS» DISCLAIMS
 * THE WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Global License for more details.
 * You should have received a copy of the GNU Affero General Global License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA, 02110-1301 USA, or download the license from the following URL:
 * http://www.gnu.org/licenses/agpl.html
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Global License.
 *
 * In accordance with Section 7(b) of the GNU Affero General Global License,
 * you must retain the producer line in every report, form or document
 * that is created or manipulated using TA Buddy.
 *
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the TA Buddy software without
 * disclosing the source code of your own applications.
 * These activities include: offering paid services to customers,
 * serving files in a web or/and network application,
 * shipping TA Buddy with a closed source product.
 *
 * For more information, please contact Digimead Team at this
 * address: ezh@ezh.msk.ru
 */

package org.digimead.tabuddy.desktop.model.editor.ui.view.editor;

import java.util.ResourceBundle;

import org.eclipse.jface.action.CoolBarManager;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.SashForm;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.CoolBar;
import org.eclipse.swt.widgets.Label;

/**
 * This file is autogenerated by Google WindowBuilder Pro
 *
 * @author ezh
 */
public class ContentSkel extends Composite {
	private static final ResourceBundle CORE_BUNDLE = getResourceCoreBundle();
	private static final ResourceBundle LOGIC_BUNDLE = getResourceLogicBundle();
	private Button btnResetActiveElement;
	private CoolBarManager coolBarManager;
	private SashForm sashForm;
	private StyledText textActiveElement;
	private StyledText textRootElement;

	/**
	 * Get ResourceBundle from Scala environment.
	 *
	 * @return ResourceBundle interface of NLS singleton.
	 */
	private static ResourceBundle getResourceCoreBundle() {
		try {
			return (ResourceBundle) Class.forName("org.digimead.tabuddy.desktop.core.Messages").newInstance();
		} catch (ClassNotFoundException e) {
			return ResourceBundle.getBundle("org.digimead.tabuddy.desktop.core.messages");
		} catch (IllegalAccessException e) {
			return ResourceBundle.getBundle("org.digimead.tabuddy.desktop.core.messages");
		} catch (InstantiationException e) {
			return ResourceBundle.getBundle("org.digimead.tabuddy.desktop.core.messages");
		}
	}

	/**
	 * Get ResourceBundle from Scala environment.
	 *
	 * @return ResourceBundle interface of NLS singleton.
	 */
	private static ResourceBundle getResourceLogicBundle() {
		try {
			return (ResourceBundle) Class.forName("org.digimead.tabuddy.desktop.logic.Messages").newInstance();
		} catch (ClassNotFoundException e) {
			return ResourceBundle.getBundle("org.digimead.tabuddy.desktop.logic.messages");
		} catch (IllegalAccessException e) {
			return ResourceBundle.getBundle("org.digimead.tabuddy.desktop.logic.messages");
		} catch (InstantiationException e) {
			return ResourceBundle.getBundle("org.digimead.tabuddy.desktop.logic.messages");
		}
	}

	public CoolBarManager getCoolBarManager() {
		return coolBarManager;
	}

	public SashForm getSashForm() {
		return sashForm;
	}

	public StyledText getTextActiveElement() {
		return textActiveElement;
	}

	public Button getBtnResetActiveElement() {
		return btnResetActiveElement;
	}

	public StyledText getTextRootElement() {
		return textRootElement;
	}

	/**
	 * Create the composite.
	 *
	 * @param parent
	 * @param style
	 */
	public ContentSkel(Composite parent, int style) {
		super(parent, style);
		GridLayout gridLayout = new GridLayout(3, false);
		setLayout(gridLayout);

		coolBarManager = new CoolBarManager(SWT.FLAT);
		CoolBar coolBar = coolBarManager.createControl(this);
		coolBar.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 3, 1));

		sashForm = new SashForm(this, SWT.SMOOTH);
		sashForm.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 3, 1));

		Label lblRoot = new Label(this, SWT.NONE);
		lblRoot.setText(LOGIC_BUNDLE.getString("rootElement_text"));

		textRootElement = new StyledText(this, SWT.BORDER | SWT.READ_ONLY | SWT.WRAP | SWT.SINGLE);
		GridData gd_styledTextRootElement = new GridData(SWT.FILL, SWT.CENTER, false, false, 2, 1);
		gd_styledTextRootElement.widthHint = 10;
		textRootElement.setLayoutData(gd_styledTextRootElement);

		Label lblActiveElement = new Label(this, SWT.NONE);
		lblActiveElement.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblActiveElement.setText(LOGIC_BUNDLE.getString("activeElement_text"));

		textActiveElement = new StyledText(this, SWT.BORDER | SWT.READ_ONLY | SWT.WRAP | SWT.SINGLE);
		textActiveElement.setAlignment(SWT.CENTER);
		textActiveElement.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));

		btnResetActiveElement = new Button(this, SWT.NONE);
		btnResetActiveElement.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		btnResetActiveElement.setText(CORE_BUNDLE.getString("reset_text"));

	}

	@Override
	protected void checkSubclass() {
		// Disable the check that prevents subclassing of SWT components
	}

}
