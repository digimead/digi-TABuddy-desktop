/**
 * This file is part of the TA Buddy project.
 * Copyright (c) 2013-2014 Alexey Aksenov ezh@ezh.msk.ru
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Global License version 3
 * as published by the Free Software Foundation with the addition of the
 * following permission added to Section 15 as permitted in Section 7(a):
 * FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED
 * BY Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS»,
 * Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS» DISCLAIMS
 * THE WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Global License for more details.
 * You should have received a copy of the GNU Affero General Global License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA, 02110-1301 USA, or download the license from the following URL:
 * http://www.gnu.org/licenses/agpl.html
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Global License.
 *
 * In accordance with Section 7(b) of the GNU Affero General Global License,
 * you must retain the producer line in every report, form or document
 * that is created or manipulated using TA Buddy.
 *
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the TA Buddy software without
 * disclosing the source code of your own applications.
 * These activities include: offering paid services to customers,
 * serving files in a web or/and network application,
 * shipping TA Buddy with a closed source product.
 *
 * For more information, please contact Digimead Team at this
 * address: ezh@ezh.msk.ru
 */

package org.digimead.tabuddy.desktop.model.editor.ui.wizard;

import java.util.ResourceBundle;

import org.eclipse.jface.viewers.ComboViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.swt.events.DisposeEvent;
import org.eclipse.swt.events.DisposeListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * This file is autogenerated by Google WindowBuilder Pro
 *
 * @author ezh
 */
public class ModelCreationWizardPageOneView extends Composite {
	private static final ResourceBundle BUNDLE = getResourceBundle();
	private final FormToolkit toolkit = new FormToolkit(Display.getCurrent());
	private Button btnLocation;
	private CCombo comboSerialization;
	private CCombo comboContentEncryption;
	private CCombo comboContainerEncryption;
	private CCombo comboDigest;
	private CCombo comboSignature;
	private ComboViewer comboViewerDigest;
	private ComboViewer comboViewerSignature;
	private ComboViewer comboViewerContainerEncryption;
	private ComboViewer comboViewerContentEncryption;
	private Label lblContainerEncryption;
	private Label lblContentEncryption;
	private Label lblDigest;
	private Label lblSignature;
	private Text textContainerEncryption;
	private Text textContentEncryption;
	private Text textDigest;
	private Text textSignature;
	private Text txtIdentificator;
	private Text txtLocation;
	private ComboViewer comboViewerSerialization;

	/**
	 * Get ResourceBundle from Scala environment.
	 *
	 * @return ResourceBundle interface of NLS singleton.
	 */
	private static ResourceBundle getResourceBundle() {
		try {
			return (ResourceBundle) Class.forName("org.digimead.tabuddy.desktop.model.editor.Messages").newInstance();
		} catch (ClassNotFoundException e) {
			return ResourceBundle.getBundle("org.digimead.tabuddy.desktop.model.editor.ui.messages");
		} catch (IllegalAccessException e) {
			return ResourceBundle.getBundle("org.digimead.tabuddy.desktop.model.editor.ui.messages");
		} catch (InstantiationException e) {
			return ResourceBundle.getBundle("org.digimead.tabuddy.desktop.model.editor.ui.messages");
		}
	}

	/**
	 * Create the composite.
	 *
	 * @param parent
	 * @param style
	 */
	public ModelCreationWizardPageOneView(Composite parent, int style) {
		super(parent, SWT.BORDER);
		addDisposeListener(new DisposeListener() {
			public void widgetDisposed(DisposeEvent e) {
				toolkit.dispose();
			}
		});
		toolkit.adapt(this);
		toolkit.paintBordersFor(this);
		setLayout(new GridLayout(3, false));

		Label lblIdentificator = toolkit.createLabel(this, BUNDLE.getString("lblIdentificator_text"), SWT.NONE);
		lblIdentificator.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));

		txtIdentificator = toolkit.createText(this, "", SWT.NONE);
		txtIdentificator.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		new Label(this, SWT.NONE);

		Label lblLocation = toolkit.createLabel(this, BUNDLE.getString("lblLocation_text"), SWT.NONE);
		lblLocation.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));

		txtLocation = toolkit.createText(this, "", SWT.NONE);
		txtLocation.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));

		btnLocation = toolkit.createButton(this, BUNDLE.getString("btnLocation_text"), SWT.NONE);

		Label lblSerialization = toolkit.createLabel(this, BUNDLE.getString("lblSerialization_text"), SWT.NONE);
		lblSerialization.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));

		comboSerialization = new CCombo(this, SWT.READ_ONLY | SWT.FLAT);
		comboSerialization.setData(FormToolkit.KEY_DRAW_BORDER, FormToolkit.TEXT_BORDER);
		comboSerialization.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		comboViewerSerialization = new ComboViewer(comboSerialization);
		toolkit.adapt(comboSerialization);
		toolkit.paintBordersFor(comboSerialization);
		new Label(this, SWT.NONE);

		lblDigest = new Label(this, SWT.NONE);
		lblDigest.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblDigest.setText(BUNDLE.getString("lblDigest_text"));
		toolkit.adapt(lblDigest, true, true);

		comboDigest = new CCombo(this, SWT.READ_ONLY | SWT.FLAT);
		comboDigest.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		comboDigest.setData(FormToolkit.KEY_DRAW_BORDER, FormToolkit.TEXT_BORDER);
		comboViewerDigest = new ComboViewer(comboDigest);
		toolkit.adapt(comboDigest);
		toolkit.paintBordersFor(comboDigest);

		textDigest = toolkit.createText(this, "", SWT.NONE);
		textDigest.setEditable(false);
		textDigest.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		toolkit.adapt(textDigest, true, true);

		lblSignature = new Label(this, SWT.NONE);
		lblSignature.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		toolkit.adapt(lblSignature, true, true);
		lblSignature.setText(BUNDLE.getString("lblSignature_text"));

		comboSignature = new CCombo(this, SWT.READ_ONLY | SWT.FLAT);
		comboSignature.setData(FormToolkit.KEY_DRAW_BORDER, FormToolkit.TEXT_BORDER);
		comboSignature.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		comboViewerSignature = new ComboViewer(comboSignature);
		toolkit.adapt(comboSignature);
		toolkit.paintBordersFor(comboSignature);

		textSignature = toolkit.createText(this, "", SWT.NONE);
		textSignature.setEditable(false);
		textSignature.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		toolkit.adapt(textSignature, true, true);

		lblContainerEncryption = new Label(this, SWT.NONE);
		lblContainerEncryption.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		toolkit.adapt(lblContainerEncryption, true, true);
		lblContainerEncryption.setText(BUNDLE.getString("lblContainerEncryption_text"));

		comboContainerEncryption = new CCombo(this, SWT.READ_ONLY | SWT.FLAT);
		comboContainerEncryption.setData(FormToolkit.KEY_DRAW_BORDER, FormToolkit.TEXT_BORDER);
		comboContainerEncryption.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		comboViewerContainerEncryption = new ComboViewer(comboContainerEncryption);
		toolkit.adapt(comboContainerEncryption);
		toolkit.paintBordersFor(comboContainerEncryption);

		textContainerEncryption = toolkit.createText(this, "", SWT.NONE);
		textContainerEncryption.setEditable(false);
		textContainerEncryption.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		toolkit.adapt(textContainerEncryption, true, true);

		lblContentEncryption = new Label(this, SWT.NONE);
		lblContentEncryption.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		toolkit.adapt(lblContentEncryption, true, true);
		lblContentEncryption.setText(BUNDLE.getString("lblContentEncryption_text"));

		comboContentEncryption = new CCombo(this, SWT.READ_ONLY | SWT.FLAT);
		comboContentEncryption.setData(FormToolkit.KEY_DRAW_BORDER, FormToolkit.TEXT_BORDER);
		comboContentEncryption.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		comboViewerContentEncryption = new ComboViewer(comboContentEncryption);
		toolkit.adapt(comboContentEncryption);
		toolkit.paintBordersFor(comboContentEncryption);

		textContentEncryption = toolkit.createText(this, "", SWT.NONE);
		textContentEncryption.setEditable(false);
		textContentEncryption.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		toolkit.adapt(textContentEncryption, true, true);
	}

	public Text getTxtModelIdentificator() {
		return txtIdentificator;
	}

	public Text getTxtModelLocation() {
		return txtLocation;
	}

	public Button getBtnModelLocation() {
		return btnLocation;
	}

	protected ComboViewer getComboViewerSerialization() {
		return comboViewerSerialization;
	}
	protected ComboViewer getComboViewerDigest() {
		return comboViewerDigest;
	}
	protected ComboViewer getComboViewerSignature() {
		return comboViewerSignature;
	}
	protected ComboViewer getComboViewerContainerEncryption() {
		return comboViewerContainerEncryption;
	}
	protected ComboViewer getComboViewerContentEncryption() {
		return comboViewerContentEncryption;
	}
	protected Text getTextDigest() {
		return textDigest;
	}
	protected Text getTextSignature() {
		return textSignature;
	}
	protected Text getTextContainerEncryption() {
		return textContainerEncryption;
	}
	protected Text getTextContentEncryption() {
		return textContentEncryption;
	}
}
