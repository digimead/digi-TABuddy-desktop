/**
 * This file is part of the TA Buddy project.
 * Copyright (c) 2014-2015 Alexey Aksenov ezh@ezh.msk.ru
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Global License version 3
 * as published by the Free Software Foundation with the addition of the
 * following permission added to Section 15 as permitted in Section 7(a):
 * FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED
 * BY Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS»,
 * Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS» DISCLAIMS
 * THE WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Global License for more details.
 * You should have received a copy of the GNU Affero General Global License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA, 02110-1301 USA, or download the license from the following URL:
 * http://www.gnu.org/licenses/agpl.html
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Global License.
 *
 * In accordance with Section 7(b) of the GNU Affero General Global License,
 * you must retain the producer line in every report, form or document
 * that is created or manipulated using TA Buddy.
 *
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the TA Buddy software without
 * disclosing the source code of your own applications.
 * These activities include: offering paid services to customers,
 * serving files in a web or/and network application,
 * shipping TA Buddy with a closed source product.
 *
 * For more information, please contact Digimead Team at this
 * address: ezh@ezh.msk.ru
 */

package org.digimead.tabuddy.desktop.logic.ui.support.encryption;

import java.util.ResourceBundle;

import org.eclipse.jface.viewers.ComboViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.swt.events.DisposeEvent;
import org.eclipse.swt.events.DisposeListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.forms.widgets.FormToolkit;

/**
 * This file is autogenerated by Google WindowBuilder Pro
 *
 * @author ezh
 */
public class BlowfishAdapterSkel extends Composite {
	private static final ResourceBundle BUNDLE = getResourceBundle();
	private final FormToolkit toolkit = new FormToolkit(Display.getCurrent());
	private Text txtSecret;
	private Text txtInitializationVector;
	private ComboViewer comboViewerKeyLength;
	private Button btnInitializationVector;
	private Button btnSecretShow;
	private Button btnInitializationVectorShow;

	/**
	 * Get ResourceBundle from Scala environment.
	 *
	 * @return ResourceBundle interface of NLS singleton.
	 */
	private static ResourceBundle getResourceBundle() {
		try {
			return (ResourceBundle) Class.forName("org.digimead.tabuddy.desktop.logic.Messages").newInstance();
		} catch (ClassNotFoundException e) {
			return ResourceBundle.getBundle("org.digimead.tabuddy.desktop.logic.messages");
		} catch (IllegalAccessException e) {
			return ResourceBundle.getBundle("org.digimead.tabuddy.desktop.logic.messages");
		} catch (InstantiationException e) {
			return ResourceBundle.getBundle("org.digimead.tabuddy.desktop.logic.messages");
		}
	}

	/**
	 * Create the composite.
	 *
	 * @param parent
	 * @param style
	 */
	public BlowfishAdapterSkel(Composite parent, int style) {
		super(parent, SWT.BORDER);
		addDisposeListener(new DisposeListener() {
			public void widgetDisposed(DisposeEvent e) {
				toolkit.dispose();
			}
		});
		toolkit.adapt(this);
		toolkit.paintBordersFor(this);
		setLayout(new GridLayout(5, false));

		Label lblSecret = toolkit.createLabel(this, BUNDLE.getString("Adapter_lblSecret_text"), SWT.NONE);
		lblSecret.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));

		txtSecret = toolkit.createText(this, "", SWT.PASSWORD);
		txtSecret.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 3, 1));

		btnSecretShow = toolkit.createButton(this, "", SWT.CHECK);

		Label lblKeyLength = toolkit.createLabel(this, BUNDLE.getString("Adapter_lblKeyLength_text"), SWT.NONE);
		lblKeyLength.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));

		CCombo comboKeyLength = new CCombo(this, SWT.READ_ONLY);
		comboViewerKeyLength = new ComboViewer(comboKeyLength);
		comboKeyLength.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 4, 1));
		toolkit.adapt(comboKeyLength);
		toolkit.paintBordersFor(comboKeyLength);

		Label lblInitializationVector = toolkit.createLabel(this, BUNDLE.getString("Adapter_lblInitializationVector_text"), SWT.NONE);
		lblInitializationVector.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		new Label(this, SWT.NONE);

		btnInitializationVector = toolkit.createButton(this, "", SWT.CHECK | SWT.CENTER);

		txtInitializationVector = toolkit.createText(this, "", SWT.PASSWORD);
		txtInitializationVector.setEnabled(false);
		txtInitializationVector.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));

		btnInitializationVectorShow = toolkit.createButton(this, "", SWT.CHECK);
		btnInitializationVectorShow.setEnabled(false);
	}

	public ComboViewer getComboViewerKeyLength() {
		return comboViewerKeyLength;
	}

	public Text getTxtSecret() {
		return txtSecret;
	}

	public Button getBtnInitializationVector() {
		return btnInitializationVector;
	}

	public Text getTxtInitializationVector() {
		return txtInitializationVector;
	}

	public Button getBtnSecretShow() {
		return btnSecretShow;
	}

	public Button getBtnInitializationVectorShow() {
		return btnInitializationVectorShow;
	}
}
