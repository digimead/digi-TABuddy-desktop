/**
 * This file is part of the TA Buddy project.
 * Copyright (c) 2014 Alexey Aksenov ezh@ezh.msk.ru
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Global License version 3
 * as published by the Free Software Foundation with the addition of the
 * following permission added to Section 15 as permitted in Section 7(a):
 * FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED
 * BY Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS»,
 * Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS» DISCLAIMS
 * THE WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Global License for more details.
 * You should have received a copy of the GNU Affero General Global License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA, 02110-1301 USA, or download the license from the following URL:
 * http://www.gnu.org/licenses/agpl.html
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Global License.
 *
 * In accordance with Section 7(b) of the GNU Affero General Global License,
 * you must retain the producer line in every report, form or document
 * that is created or manipulated using TA Buddy.
 *
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the TA Buddy software without
 * disclosing the source code of your own applications.
 * These activities include: offering paid services to customers,
 * serving files in a web or/and network application,
 * shipping TA Buddy with a closed source product.
 *
 * For more information, please contact Digimead Team at this
 * address: ezh@ezh.msk.ru
 */

package org.digimead.tabuddy.desktop.logic.ui.dialog;

import java.util.ResourceBundle;

import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.TitleAreaDialog;
import org.eclipse.jface.viewers.ComboViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.nebula.widgets.gallery.Gallery;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.SashForm;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.custom.StackLayout;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.Text;

/**
 * This file is autogenerated by Google WindowBuilder Pro
 *
 * @author ezh
 */
public class GraphSelectionDialogSkel extends TitleAreaDialog {
	private static final ResourceBundle BUNDLE = getResourceBundle();
	private Table tableGraph;
	private Text textFilter;
	private SashForm sashForm;
	private ScrolledComposite compositePreview;
	private ModifiedTableViewer tableViewer;
	private Gallery tableGallery;
	private Composite compositePreviewContent;
	private Composite compositePreviewNone;
	private Button btnResetFilter;
	private Button btnToggleMode;
	private Composite compositeSelect;
	private TableViewerColumn tableViewerColumnOrigin;
	private TableViewerColumn tableViewerColumnName;
	private TableViewerColumn tableViewerColumnCreated;
	private TableViewerColumn tableViewerColumnModified;
	private ComboViewer comboViewerFilter;
	private Label lblNameValue;
	private Label lblOriginValue;
	private Composite tableContainer;

	/**
	 * Get ResourceBundle from Scala environment.
	 *
	 * @return ResourceBundle interface of NLS singleton.
	 */
	private static ResourceBundle getResourceBundle() {
		try {
			return (ResourceBundle) Class.forName("org.digimead.tabuddy.desktop.logic.Messages").newInstance();
		} catch (ClassNotFoundException e) {
			return ResourceBundle.getBundle("org.digimead.tabuddy.desktop.logic.ui.messages");
		} catch (IllegalAccessException e) {
			return ResourceBundle.getBundle("org.digimead.tabuddy.desktop.logic.ui.messages");
		} catch (InstantiationException e) {
			return ResourceBundle.getBundle("org.digimead.tabuddy.desktop.logic.ui.messages");
		}
	}

	/**
	 * Create the dialog.
	 *
	 * @param parentShell
	 */
	public GraphSelectionDialogSkel(Shell parentShell) {
		super(parentShell);
		setShellStyle(SWT.SHELL_TRIM | SWT.APPLICATION_MODAL);
	}

	/**
	 * Create contents of the dialog.
	 *
	 * @param parent
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		setMessage(BUNDLE.getString("graphSelectionDialogDescription_text"));
		setTitle(BUNDLE.getString("graphSelectionDialogTitle_text"));
		parent.getShell().setText(BUNDLE.getString("graphSelectionDialog_text"));
		Composite area = (Composite) super.createDialogArea(parent);
		Composite container = new Composite(area, SWT.NONE);
		container.setLayout(new FillLayout(SWT.HORIZONTAL));
		container.setLayoutData(new GridData(GridData.FILL_BOTH));

		sashForm = new SashForm(container, SWT.SMOOTH);
		sashForm.setOrientation(SWT.HORIZONTAL);

		compositePreview = new ScrolledComposite(sashForm, SWT.H_SCROLL | SWT.V_SCROLL);
		compositePreview.setExpandVertical(true);
		compositePreview.setExpandHorizontal(true);
		compositePreviewContent = new Composite(compositePreview, SWT.NONE);
		compositePreviewContent.setLayout(new GridLayout(2, true));

		Label lblName = new Label(compositePreviewContent, SWT.WRAP);
		lblName.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, false, false, 1, 1));
		lblName.setText("Name");

		lblNameValue = new Label(compositePreviewContent, SWT.WRAP);
		lblNameValue.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, false, false, 1, 1));

		Label lblOrigin = new Label(compositePreviewContent, SWT.WRAP);
		lblOrigin.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, false, false, 1, 1));
		lblOrigin.setText("Origin");

		lblOriginValue = new Label(compositePreviewContent, SWT.WRAP);
		lblOriginValue.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, false, false, 1, 1));

		compositePreviewNone = new Composite(compositePreview, SWT.NONE);
		compositePreviewNone.setLayout(new GridLayout(1, false));
		compositePreview.setContent(compositePreviewNone);
		compositePreview.setMinSize(compositePreviewNone.computeSize(SWT.DEFAULT, SWT.DEFAULT));

		Label lblNone = new Label(compositePreviewNone, SWT.NONE);
		lblNone.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, true, true, 1, 1));
		lblNone.setText("None");

		compositeSelect = new Composite(sashForm, SWT.NONE);
		compositeSelect.setLayout(new GridLayout(5, false));

		Label lblFilter = new Label(compositeSelect, SWT.NONE);
		lblFilter.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblFilter.setText("Filter");

		textFilter = new Text(compositeSelect, SWT.BORDER);
		textFilter.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		textFilter.setMessage("* - for any characters");

		comboViewerFilter = new ComboViewer(compositeSelect, SWT.READ_ONLY);
		Combo comboFilter = comboViewerFilter.getCombo();
		comboFilter.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));

		btnResetFilter = new Button(compositeSelect, SWT.NONE);
		btnResetFilter.setText("R");

		btnToggleMode = new Button(compositeSelect, SWT.NONE);
		btnToggleMode.setText("M");

		tableContainer = new Composite(compositeSelect, SWT.NONE);
		tableContainer.setLayout(new StackLayout());
		tableContainer.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 5, 1));

		tableViewer = new ModifiedTableViewer(tableContainer, SWT.BORDER | SWT.FULL_SELECTION);
		tableGraph = tableViewer.getTable();
		tableGraph.setLinesVisible(true);
		tableGraph.setHeaderVisible(true);

		tableViewerColumnName = new TableViewerColumn(tableViewer, SWT.NONE);
		TableColumn tblclmnName = tableViewerColumnName.getColumn();
		tblclmnName.setWidth(100);
		tblclmnName.setText("Name");

		tableViewerColumnOrigin = new TableViewerColumn(tableViewer, SWT.NONE);
		TableColumn tblclmnOrigin = tableViewerColumnOrigin.getColumn();
		tblclmnOrigin.setWidth(100);
		tblclmnOrigin.setText("Origin");

		tableViewerColumnCreated = new TableViewerColumn(tableViewer, SWT.NONE);
		TableColumn tblclmnCreated = tableViewerColumnCreated.getColumn();
		tblclmnCreated.setWidth(100);
		tblclmnCreated.setText("Created");

		tableViewerColumnModified = new TableViewerColumn(tableViewer, SWT.NONE);
		TableColumn tblclmnModified = tableViewerColumnModified.getColumn();
		tblclmnModified.setWidth(100);
		tblclmnModified.setText("Modified");

		tableGallery = new Gallery(tableContainer, SWT.VIRTUAL | SWT.V_SCROLL | SWT.BORDER);

		sashForm.setWeights(new int[] { 1, 3 });

		return area;
	}

	/**
	 * Create contents of the button bar.
	 *
	 * @param parent
	 */
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		Button button = createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL, true);
		button.setEnabled(false);
		createButton(parent, IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);
	}

	protected SashForm getSashForm() {
		return sashForm;
	}

	protected ScrolledComposite getCompositePreview() {
		return compositePreview;
	}

	protected Text getTextFilter() {
		return textFilter;
	}

	protected ModifiedTableViewer getTableViewer() {
		return tableViewer;
	}

	protected Composite getCompositePreviewContent() {
		return compositePreviewContent;
	}

	protected Composite getCompositePreviewNone() {
		return compositePreviewNone;
	}

	protected Button getBtnResetFilter() {
		return btnResetFilter;
	}

	protected Button getBtnToggleMode() {
		return btnToggleMode;
	}

	protected Composite getCompositeSelect() {
		return compositeSelect;
	}

	protected TableViewerColumn getTableViewerColumnName() {
		return tableViewerColumnName;
	}

	protected TableViewerColumn getTableViewerColumnOrigin() {
		return tableViewerColumnOrigin;
	}

	protected TableViewerColumn getTableViewerColumnCreated() {
		return tableViewerColumnCreated;
	}

	protected TableViewerColumn getTableViewerColumnModified() {
		return tableViewerColumnModified;
	}

	protected ComboViewer getComboViewerFilter() {
		return comboViewerFilter;
	}

	protected Label getLblNameValue() {
		return lblNameValue;
	}

	protected Label getLblOriginValue() {
		return lblOriginValue;
	}

	protected Composite getTableContainer() {
		return tableContainer;
	}

	protected Gallery getTableGallery() {
		return tableGallery;
	}
}
