/**
 * This file is part of the TA Buddy project.
 * Copyright (c) 2013-2014 Alexey Aksenov ezh@ezh.msk.ru
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Global License version 3
 * as published by the Free Software Foundation with the addition of the
 * following permission added to Section 15 as permitted in Section 7(a):
 * FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED
 * BY Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS»,
 * Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS» DISCLAIMS
 * THE WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Global License for more details.
 * You should have received a copy of the GNU Affero General Global License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA, 02110-1301 USA, or download the license from the following URL:
 * http://www.gnu.org/licenses/agpl.html
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Global License.
 *
 * In accordance with Section 7(b) of the GNU Affero General Global License,
 * you must retain the producer line in every report, form or document
 * that is created or manipulated using TA Buddy.
 *
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the TA Buddy software without
 * disclosing the source code of your own applications.
 * These activities include: offering paid services to customers,
 * serving files in a web or/and network application,
 * shipping TA Buddy with a closed source product.
 *
 * For more information, please contact Digimead Team at this
 * address: ezh@ezh.msk.ru
 */

package org.digimead.tabuddy.desktop.logic.ui.wizard;

import org.digimead.tabuddy.desktop.core.definition.BaseResourceBundle;
import org.eclipse.jface.viewers.ComboViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.swt.events.DisposeEvent;
import org.eclipse.swt.events.DisposeListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.forms.widgets.Form;
import org.eclipse.ui.forms.widgets.FormToolkit;
import org.eclipse.ui.forms.widgets.Section;
import org.eclipse.ui.forms.widgets.TableWrapData;
import org.eclipse.ui.forms.widgets.TableWrapLayout;

/**
 * This file is autogenerated by Google WindowBuilder Pro
 *
 * @author ezh
 */
public class NewGraphWizardPageOneView extends Composite {
	private static final BaseResourceBundle BUNDLE = getResourceBundle();
	private final FormToolkit toolkit = new FormToolkit(Display.getCurrent());
	private Button btnLocation;
	private CCombo comboSerialization;
	private CCombo comboContentEncryption;
	private CCombo comboContainerEncryption;
	private CCombo comboDigestFreeze;
	private CCombo comboSignatureFreeze;
	private CCombo comboDigestAcquire;
	private CCombo comboSignatureAcquire;
	private ComboViewer comboViewerDigestFreeze;
	private ComboViewer comboViewerSignatureFreeze;
	private ComboViewer comboViewerContainerEncryption;
	private ComboViewer comboViewerContentEncryption;
	private Label lblContainerEncryption;
	private Label lblContentEncryption;
	private Label lblDigestFreeze;
	private Label lblSignatureFreeze;
	private Label lblDigestAcquire;
	private Label lblSignatureAcquire;
	private Text textContainerEncryption;
	private Text textContentEncryption;
	private Text textDigestFreeze;
	private Text textSignatureFreeze;
	private Text txtIdentificator;
	private Text txtLocation;
	private ComboViewer comboViewerSerialization;
	private Form form;
	private Composite compositeCommon;
	private Section sctnCommon;
	private Section sctnFreeze;
	private Section sctnAcquire;
	private Composite compositeFreeze;
	private Composite compositeAcquire;
	private ComboViewer comboViewerDigestAcquire;
	private ComboViewer comboViewerSignatureAcquire;
	private Button btnSignatureAcquire;

	/**
	 * Get ResourceBundle from Scala environment.
	 *
	 * @return ResourceBundle interface of NLS singleton.
	 */
	private static BaseResourceBundle getResourceBundle() {
		try {
			return (BaseResourceBundle) Class.forName("org.digimead.tabuddy.desktop.logic.Messages").newInstance();
		} catch (ClassNotFoundException e) {
			return new BaseResourceBundle.Empty();
		} catch (IllegalAccessException e) {
			return new BaseResourceBundle.Empty();
		} catch (InstantiationException e) {
			return new BaseResourceBundle.Empty();
		}
	}

	/**
	 * Create the composite.
	 *
	 * @param parent
	 * @param style
	 */
	public NewGraphWizardPageOneView(Composite parent, int style) {
		super(parent, SWT.NONE);
		addDisposeListener(new DisposeListener() {
			public void widgetDisposed(DisposeEvent e) {
				toolkit.dispose();
			}
		});
		toolkit.adapt(this);
		toolkit.paintBordersFor(this);
		GridLayout gridLayout = new GridLayout(1, false);
		gridLayout.verticalSpacing = 0;
		gridLayout.marginWidth = 0;
		gridLayout.marginHeight = 0;
		gridLayout.horizontalSpacing = 0;
		setLayout(gridLayout);

		form = toolkit.createForm(this);
		form.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, true, 1, 1));
		toolkit.paintBordersFor(form);
		form.setText(BUNDLE.getString("NewGraphWizardPageOne_formTitle_text"));
		toolkit.decorateFormHeading(form);
		{
			TableWrapLayout tableWrapLayout = new TableWrapLayout();
			form.getBody().setLayout(tableWrapLayout);
		}

		sctnCommon = toolkit.createSection(form.getBody(), Section.EXPANDED | Section.TITLE_BAR);
		TableWrapData twd_sctnCommon = new TableWrapData(TableWrapData.LEFT, TableWrapData.TOP, 1, 1);
		twd_sctnCommon.align = TableWrapData.FILL;
		twd_sctnCommon.grabHorizontal = true;
		sctnCommon.setLayoutData(twd_sctnCommon);
		toolkit.paintBordersFor(sctnCommon);
		sctnCommon.setText(BUNDLE.getString("NewGraphWizardPageOne_sctnCommon_text"));
		sctnCommon.setExpanded(true);
		compositeCommon = toolkit.createComposite(sctnCommon, SWT.NONE);
		sctnCommon.setClient(compositeCommon);
		toolkit.paintBordersFor(compositeCommon);
		{
			TableWrapLayout twl_compositeCommon = new TableWrapLayout();
			twl_compositeCommon.numColumns = 3;
			compositeCommon.setLayout(twl_compositeCommon);
		}

		Label lblIdentificator = toolkit.createLabel(compositeCommon, BUNDLE.getString("NewGraphWizardPageOne_lblIdentificator_text"), SWT.NONE);
		lblIdentificator.setLayoutData(new TableWrapData(TableWrapData.RIGHT, TableWrapData.MIDDLE, 1, 1));

		txtIdentificator = toolkit.createText(compositeCommon, "", SWT.NONE);
		txtIdentificator.setLayoutData(new TableWrapData(TableWrapData.FILL_GRAB, TableWrapData.MIDDLE, 1, 1));
		new Label(compositeCommon, SWT.NONE);

		Label lblLocation = toolkit.createLabel(compositeCommon, BUNDLE.getString("NewGraphWizardPageOne_lblLocation_text"), SWT.NONE);
		lblLocation.setLayoutData(new TableWrapData(TableWrapData.RIGHT, TableWrapData.MIDDLE, 1, 1));

		txtLocation = toolkit.createText(compositeCommon, "", SWT.NONE);
		txtLocation.setLayoutData(new TableWrapData(TableWrapData.FILL_GRAB, TableWrapData.MIDDLE, 1, 1));

		btnLocation = toolkit.createButton(compositeCommon, BUNDLE.getString("NewGraphWizardPageOne_btnLocation_text"), SWT.NONE);
		btnLocation.setLayoutData(new TableWrapData(TableWrapData.LEFT, TableWrapData.MIDDLE, 1, 1));

		Label lblSerialization = toolkit.createLabel(compositeCommon, BUNDLE.getString("NewGraphWizardPageOne_lblSerialization_text"), SWT.NONE);
		lblSerialization.setLayoutData(new TableWrapData(TableWrapData.RIGHT, TableWrapData.MIDDLE, 1, 1));

		comboSerialization = new CCombo(compositeCommon, SWT.READ_ONLY);
		comboSerialization.setLayoutData(new TableWrapData(TableWrapData.FILL_GRAB, TableWrapData.MIDDLE, 1, 1));
		comboViewerSerialization = new ComboViewer(comboSerialization);
		toolkit.adapt(comboSerialization);
		toolkit.paintBordersFor(comboSerialization);
		new Label(compositeCommon, SWT.NONE);

		lblContainerEncryption = new Label(compositeCommon, SWT.NONE);
		lblContainerEncryption.setLayoutData(new TableWrapData(TableWrapData.RIGHT, TableWrapData.MIDDLE, 1, 1));
		toolkit.adapt(lblContainerEncryption, true, true);
		lblContainerEncryption.setText(BUNDLE.getString("NewGraphWizardPageOne_lblContainerEncryption_text"));

		comboContainerEncryption = new CCombo(compositeCommon, SWT.READ_ONLY);
		comboContainerEncryption.setLayoutData(new TableWrapData(TableWrapData.FILL_GRAB, TableWrapData.MIDDLE, 1, 1));
		comboViewerContainerEncryption = new ComboViewer(comboContainerEncryption);
		toolkit.adapt(comboContainerEncryption);
		toolkit.paintBordersFor(comboContainerEncryption);
		new Label(compositeCommon, SWT.NONE);

		toolkit.createLabel(compositeCommon, BUNDLE.getString("NewGraphWizardPageOne_lblContainerEncryption_text"), SWT.NONE).setVisible(false);
		textContainerEncryption = toolkit.createText(compositeCommon, "", SWT.NONE);
		textContainerEncryption.setLayoutData(new TableWrapData(TableWrapData.FILL_GRAB, TableWrapData.MIDDLE, 1, 1));
		textContainerEncryption.setEnabled(false);
		textContainerEncryption.setEditable(false);
		toolkit.adapt(textContainerEncryption, true, true);
		new Label(compositeCommon, SWT.NONE);

		lblContentEncryption = new Label(compositeCommon, SWT.NONE);
		lblContentEncryption.setLayoutData(new TableWrapData(TableWrapData.RIGHT, TableWrapData.MIDDLE, 1, 1));
		toolkit.adapt(lblContentEncryption, true, true);
		lblContentEncryption.setText(BUNDLE.getString("NewGraphWizardPageOne_lblContentEncryption_text"));

		comboContentEncryption = new CCombo(compositeCommon, SWT.READ_ONLY);
		comboContentEncryption.setLayoutData(new TableWrapData(TableWrapData.FILL_GRAB, TableWrapData.MIDDLE, 1, 1));
		comboViewerContentEncryption = new ComboViewer(comboContentEncryption);
		toolkit.adapt(comboContentEncryption);
		toolkit.paintBordersFor(comboContentEncryption);
		new Label(compositeCommon, SWT.NONE);

		toolkit.createLabel(compositeCommon, BUNDLE.getString("NewGraphWizardPageOne_lblContentEncryption_text"), SWT.NONE).setVisible(false);
		textContentEncryption = toolkit.createText(compositeCommon, "", SWT.NONE);
		textContentEncryption.setLayoutData(new TableWrapData(TableWrapData.FILL_GRAB, TableWrapData.MIDDLE, 1, 1));
		textContentEncryption.setEnabled(false);
		textContentEncryption.setEditable(false);
		toolkit.adapt(textContentEncryption, true, true);
		new Label(compositeCommon, SWT.NONE);

		sctnFreeze = toolkit.createSection(form.getBody(), Section.EXPANDED | Section.TITLE_BAR);
		TableWrapData twd_sctnFreeze = new TableWrapData(TableWrapData.LEFT, TableWrapData.TOP, 1, 1);
		twd_sctnFreeze.grabHorizontal = true;
		twd_sctnFreeze.align = TableWrapData.FILL;
		sctnFreeze.setLayoutData(twd_sctnFreeze);
		toolkit.paintBordersFor(sctnFreeze);
		sctnFreeze.setText(BUNDLE.getString("NewGraphWizardPageOne_sctnFreeze_text"));

		compositeFreeze = toolkit.createComposite(sctnFreeze, SWT.NONE);
		toolkit.paintBordersFor(compositeFreeze);
		sctnFreeze.setClient(compositeFreeze);
		{
			TableWrapLayout twl_compositeCommon = new TableWrapLayout();
			twl_compositeCommon.numColumns = 2;
			compositeFreeze.setLayout(twl_compositeCommon);
		}

		lblDigestFreeze = toolkit.createLabel(compositeFreeze, BUNDLE.getString("NewGraphWizardPageOne_lblDigestFreeze_text"), SWT.NONE);
		lblDigestFreeze.setLayoutData(new TableWrapData(TableWrapData.RIGHT, TableWrapData.MIDDLE, 1, 1));

		comboDigestFreeze = new CCombo(compositeFreeze, SWT.READ_ONLY);
		comboDigestFreeze.setLayoutData(new TableWrapData(TableWrapData.FILL_GRAB, TableWrapData.MIDDLE, 1, 1));
		comboViewerDigestFreeze = new ComboViewer(comboDigestFreeze);
		toolkit.adapt(comboDigestFreeze);
		toolkit.paintBordersFor(comboDigestFreeze);

		toolkit.createLabel(compositeFreeze, BUNDLE.getString("NewGraphWizardPageOne_lblDigestFreeze_text"), SWT.NONE).setVisible(false);
		textDigestFreeze = toolkit.createText(compositeFreeze, "", SWT.NONE);
		textDigestFreeze.setLayoutData(new TableWrapData(TableWrapData.FILL_GRAB, TableWrapData.MIDDLE, 1, 1));
		textDigestFreeze.setEnabled(false);
		textDigestFreeze.setEditable(false);
		toolkit.adapt(textDigestFreeze, true, true);

		lblSignatureFreeze = toolkit.createLabel(compositeFreeze, BUNDLE.getString("NewGraphWizardPageOne_lblSignatureFreeze_text"), SWT.NONE);
		lblSignatureFreeze.setLayoutData(new TableWrapData(TableWrapData.RIGHT, TableWrapData.MIDDLE, 1, 1));

		comboSignatureFreeze = new CCombo(compositeFreeze, SWT.READ_ONLY);
		comboSignatureFreeze.setLayoutData(new TableWrapData(TableWrapData.FILL_GRAB, TableWrapData.MIDDLE, 1, 1));
		comboViewerSignatureFreeze = new ComboViewer(comboSignatureFreeze);
		toolkit.adapt(comboSignatureFreeze);
		toolkit.paintBordersFor(comboSignatureFreeze);

		toolkit.createLabel(compositeFreeze, BUNDLE.getString("NewGraphWizardPageOne_lblSignatureFreeze_text"), SWT.NONE).setVisible(false);
		textSignatureFreeze = toolkit.createText(compositeFreeze, "", SWT.NONE);
		textSignatureFreeze.setLayoutData(new TableWrapData(TableWrapData.FILL_GRAB, TableWrapData.MIDDLE, 1, 1));
		textSignatureFreeze.setEnabled(false);
		textSignatureFreeze.setEditable(false);
		toolkit.adapt(textSignatureFreeze, true, true);

		sctnAcquire = toolkit.createSection(form.getBody(), Section.EXPANDED | Section.TITLE_BAR);
		TableWrapData twd_sctnAcquire = new TableWrapData(TableWrapData.LEFT, TableWrapData.TOP, 1, 1);
		twd_sctnAcquire.grabHorizontal = true;
		twd_sctnAcquire.align = TableWrapData.FILL;
		sctnAcquire.setLayoutData(twd_sctnAcquire);
		toolkit.paintBordersFor(sctnAcquire);
		sctnAcquire.setText(BUNDLE.getString("NewGraphWizardPageOne_sctnAcquire_text"));

		compositeAcquire = toolkit.createComposite(sctnAcquire, SWT.NONE);
		toolkit.paintBordersFor(compositeAcquire);
		sctnAcquire.setClient(compositeAcquire);
		{
			TableWrapLayout twl_compositeAcquire = new TableWrapLayout();
			twl_compositeAcquire.numColumns = 3;
			compositeAcquire.setLayout(twl_compositeAcquire);
		}

		lblDigestAcquire = toolkit.createLabel(compositeAcquire, BUNDLE.getString("NewGraphWizardPageOne_lblDigestAcquire_text"), SWT.NONE);
		TableWrapData twd_lblDigestAcquire = new TableWrapData(TableWrapData.LEFT, TableWrapData.TOP, 1, 1);
		twd_lblDigestAcquire.align = TableWrapData.RIGHT;
		lblDigestAcquire.setLayoutData(twd_lblDigestAcquire);

		comboDigestAcquire = new CCombo(compositeAcquire, SWT.READ_ONLY);
		comboViewerDigestAcquire = new ComboViewer(comboDigestAcquire);
		TableWrapData twd_comboDigestAcquire = new TableWrapData(TableWrapData.LEFT, TableWrapData.TOP, 1, 1);
		twd_comboDigestAcquire.align = TableWrapData.FILL;
		twd_comboDigestAcquire.grabHorizontal = true;
		comboDigestAcquire.setLayoutData(twd_comboDigestAcquire);
		toolkit.adapt(comboDigestAcquire);
		toolkit.paintBordersFor(comboDigestAcquire);
		new Label(compositeAcquire, SWT.NONE);

		lblSignatureAcquire = toolkit.createLabel(compositeAcquire, BUNDLE.getString("NewGraphWizardPageOne_lblSignatureAcquire_text"), SWT.NONE);
		TableWrapData twd_lblSignatureAcquire = new TableWrapData(TableWrapData.LEFT, TableWrapData.TOP, 1, 1);
		twd_lblSignatureAcquire.align = TableWrapData.RIGHT;
		lblSignatureAcquire.setLayoutData(twd_lblSignatureAcquire);

		comboSignatureAcquire = new CCombo(compositeAcquire, SWT.READ_ONLY);
		comboViewerSignatureAcquire = new ComboViewer(comboSignatureAcquire);
		TableWrapData twd_combo = new TableWrapData(TableWrapData.LEFT, TableWrapData.TOP, 1, 1);
		twd_combo.grabHorizontal = true;
		twd_combo.align = TableWrapData.FILL;
		comboSignatureAcquire.setLayoutData(twd_combo);
		toolkit.adapt(comboSignatureAcquire);
		toolkit.paintBordersFor(comboSignatureAcquire);

		btnSignatureAcquire = toolkit.createButton(compositeAcquire, BUNDLE.getString("NewGraphWizardPageOne_btnSignatureAcquire_text"), SWT.NONE);

	}

	protected Text getTxtIdentificator() {
		return txtIdentificator;
	}

	protected Text getTxtLocation() {
		return txtLocation;
	}

	protected Button getBtnLocation() {
		return btnLocation;
	}

	protected ComboViewer getComboViewerSerialization() {
		return comboViewerSerialization;
	}

	protected ComboViewer getComboViewerDigestFreeze() {
		return comboViewerDigestFreeze;
	}

	protected ComboViewer getComboViewerSignatureFreeze() {
		return comboViewerSignatureFreeze;
	}

	protected ComboViewer getComboViewerContainerEncryption() {
		return comboViewerContainerEncryption;
	}

	protected ComboViewer getComboViewerContentEncryption() {
		return comboViewerContentEncryption;
	}

	protected Text getTextDigestFreeze() {
		return textDigestFreeze;
	}

	protected Text getTextSignatureFreeze() {
		return textSignatureFreeze;
	}

	protected Text getTextContainerEncryption() {
		return textContainerEncryption;
	}

	protected Text getTextContentEncryption() {
		return textContentEncryption;
	}

	protected Form getForm() {
		return form;
	}

	protected ComboViewer getComboViewerDigestAcquire() {
		return comboViewerDigestAcquire;
	}

	protected ComboViewer getComboViewerSignatureAcquire() {
		return comboViewerSignatureAcquire;
	}

	protected Button getBtnSignatureAcquire() {
		return btnSignatureAcquire;
	}

	protected Label getLblDigestAcquire() {
		return lblDigestAcquire;
	}

	protected Label getLblSignatureAcquire() {
		return lblSignatureAcquire;
	}
}
