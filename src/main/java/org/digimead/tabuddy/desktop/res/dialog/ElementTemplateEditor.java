/**
 * This file is part of the TABuddy project.
 * Copyright (c) 2012-2013 Alexey Aksenov ezh@ezh.msk.ru
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Global License version 3
 * as published by the Free Software Foundation with the addition of the
 * following permission added to Section 15 as permitted in Section 7(a):
 * FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED
 * BY Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS»,
 * Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS» DISCLAIMS
 * THE WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Global License for more details.
 * You should have received a copy of the GNU Affero General Global License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA, 02110-1301 USA, or download the license from the following URL:
 * http://www.gnu.org/licenses/agpl.html
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Global License.
 *
 * In accordance with Section 7(b) of the GNU Affero General Global License,
 * you must retain the producer line in every report, form or document
 * that is created or manipulated using TABuddy.
 *
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the TABuddy software without
 * disclosing the source code of your own applications.
 * These activities include: offering paid services to customers,
 * serving files in a web or/and network application,
 * shipping TABuddy with a closed source product.
 *
 * For more information, please contact Digimead Team at this
 * address: ezh@ezh.msk.ru
 */

package org.digimead.tabuddy.desktop.res.dialog;

import org.digimead.tabuddy.desktop.res.Messages;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.TitleAreaDialog;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.Text;

import swing2swt.layout.BorderLayout;
import swing2swt.layout.FlowLayout;
import org.eclipse.swt.widgets.Button;

/**
 * This file is autogenerated by Google WindowBuilder Pro
 *
 * @author ezh
 */
public class ElementTemplateEditor extends TitleAreaDialog {
	private Text textTemplateDescription;
	private Text textTemplateID;
	private Composite compositeTemplateInfo;
	private Composite compositeActions;
	private TableViewer tableViewerTemplateProperties;
	private TableViewerColumn tableViewerColumnId;
	private TableViewerColumn tableViewerColumnRequired;
	private TableViewerColumn tableViewerColumnType;
	private TableViewerColumn tableViewerColumnDefault;
	private TableViewerColumn tableViewerColumnGroup;
	private Button btnCheckAvailability;

	/**
	 * Create the dialog.
	 *
	 * @param parentShell
	 */
	public ElementTemplateEditor(Shell parentShell) {
		super(parentShell);
		setShellStyle(SWT.DIALOG_TRIM | SWT.RESIZE | SWT.PRIMARY_MODAL);
	}

	/**
	 * Create contents of the dialog.
	 *
	 * @param parent
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		setMessage(Messages.elementTemplateEditorDescription_text);
		setTitle(Messages.elementTemplateEditorTitle_text);
		Composite area = (Composite) super.createDialogArea(parent);
		Composite container = new Composite(area, SWT.NONE);
		container.setLayout(new BorderLayout(0, 0));
		container.setLayoutData(new GridData(GridData.FILL_BOTH));

		compositeTemplateInfo = new Composite(container, SWT.NONE);
		compositeTemplateInfo.setLayoutData(BorderLayout.NORTH);
		compositeTemplateInfo.setLayout(new GridLayout(2, false));

		Label lblTemplateName = new Label(compositeTemplateInfo, SWT.NONE);
		lblTemplateName.setAlignment(SWT.RIGHT);
		lblTemplateName.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER,
				false, false, 1, 1));
		lblTemplateName.setBounds(0, 0, 65, 15);
		lblTemplateName.setText(Messages.name_text);

		textTemplateID = new Text(compositeTemplateInfo, SWT.BORDER);
		textTemplateID.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true,
				false, 1, 1));
		textTemplateID.setText("");

		Label lblDescription = new Label(compositeTemplateInfo, SWT.NONE);
		lblDescription.setAlignment(SWT.RIGHT);
		lblDescription.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false,
				false, 1, 1));
		lblDescription.setText(Messages.description_text);

		textTemplateDescription = new Text(compositeTemplateInfo, SWT.BORDER);
		textTemplateDescription.setLayoutData(new GridData(SWT.FILL,
				SWT.CENTER, true, false, 1, 1));
		textTemplateDescription.setText("");
		new Label(compositeTemplateInfo, SWT.NONE);

		btnCheckAvailability = new Button(compositeTemplateInfo, SWT.CHECK);
		btnCheckAvailability.setText(Messages.availability_text);

		tableViewerTemplateProperties = new TableViewer(container, SWT.BORDER
				| SWT.FULL_SELECTION);
		Table table = tableViewerTemplateProperties.getTable();
		table.setLinesVisible(true);
		table.setHeaderVisible(true);

		tableViewerColumnId = new TableViewerColumn(tableViewerTemplateProperties, SWT.NONE);
		TableColumn tblclmnId = tableViewerColumnId.getColumn();
		tblclmnId.setWidth(100);
		tblclmnId.setText(Messages.name_text);

		tableViewerColumnRequired = new TableViewerColumn(tableViewerTemplateProperties, SWT.NONE);
		TableColumn tblclmnRequired = tableViewerColumnRequired.getColumn();
		tblclmnRequired.setWidth(100);
		tblclmnRequired.setText(Messages.required_text);

		tableViewerColumnType = new TableViewerColumn(tableViewerTemplateProperties, SWT.NONE);
		TableColumn tblclmnType = tableViewerColumnType.getColumn();
		tblclmnType.setWidth(100);
		tblclmnType.setText(Messages.type_text);

		tableViewerColumnDefault = new TableViewerColumn(tableViewerTemplateProperties, SWT.NONE);
		TableColumn tblclmnDefault = tableViewerColumnDefault.getColumn();
		tblclmnDefault.setWidth(100);
		tblclmnDefault.setText(Messages.default_text);

		tableViewerColumnGroup = new TableViewerColumn(tableViewerTemplateProperties, SWT.NONE);
		TableColumn tblclmnGroup = tableViewerColumnGroup.getColumn();
		tblclmnGroup.setWidth(100);
		tblclmnGroup.setText(Messages.group_text);

		compositeActions = new Composite(container, SWT.NONE);
		compositeActions.setLayoutData(BorderLayout.SOUTH);
		compositeActions.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));

		return area;
	}

	/**
	 * Create contents of the button bar.
	 *
	 * @param parent
	 */
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		Button button = createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL,
				true);
		button.setEnabled(false);
		createButton(parent, IDialogConstants.CANCEL_ID,
				IDialogConstants.CANCEL_LABEL, false);
	}

	protected Composite getCompositeActions() {
		return compositeActions;
	}

	protected TableViewer getTableViewerTemplateProperties() {
		return tableViewerTemplateProperties;
	}

	protected Text getTextTemplateDescription() {
		return textTemplateDescription;
	}

	protected Text getTextTemplateID() {
		return textTemplateID;
	}

	protected Button getBtnCheckAvailability() {
		return btnCheckAvailability;
	}

	protected TableViewerColumn getTableViewerColumnId() {
		return tableViewerColumnId;
	}

	protected TableViewerColumn getTableViewerColumnRequired() {
		return tableViewerColumnRequired;
	}

	protected TableViewerColumn getTableViewerColumnType() {
		return tableViewerColumnType;
	}

	protected TableViewerColumn getTableViewerColumnDefault() {
		return tableViewerColumnDefault;
	}

	protected TableViewerColumn getTableViewerColumnGroup() {
		return tableViewerColumnGroup;
	}
}
