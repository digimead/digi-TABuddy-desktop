/**
 * This file is part of the TABuddy project.
 * Copyright (c) 2012-2013 Alexey Aksenov ezh@ezh.msk.ru
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Global License version 3
 * as published by the Free Software Foundation with the addition of the
 * following permission added to Section 15 as permitted in Section 7(a):
 * FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED
 * BY Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS»,
 * Limited Liability Company «MEZHGALAKTICHESKIJ TORGOVYJ ALIANS» DISCLAIMS
 * THE WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Global License for more details.
 * You should have received a copy of the GNU Affero General Global License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA, 02110-1301 USA, or download the license from the following URL:
 * http://www.gnu.org/licenses/agpl.html
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Global License.
 *
 * In accordance with Section 7(b) of the GNU Affero General Global License,
 * you must retain the producer line in every report, form or document
 * that is created or manipulated using TABuddy.
 *
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the TABuddy software without
 * disclosing the source code of your own applications.
 * These activities include: offering paid services to customers,
 * serving files in a web or/and network application,
 * shipping TABuddy with a closed source product.
 *
 * For more information, please contact Digimead Team at this
 * address: ezh@ezh.msk.ru
 */

package org.digimead.tabuddy.desktop.res.dialog;

import java.util.ArrayList;
import java.util.List;

import org.digimead.tabuddy.desktop.res.AbstractModelObject;
import org.digimead.tabuddy.desktop.res.Messages;
import org.eclipse.core.databinding.DataBindingContext;
import org.eclipse.core.databinding.beans.BeanProperties;
import org.eclipse.core.databinding.beans.PojoObservables;
import org.eclipse.core.databinding.observable.list.IObservableList;
import org.eclipse.core.databinding.observable.map.IObservableMap;
import org.eclipse.core.databinding.observable.value.IObservableValue;
import org.eclipse.core.databinding.observable.value.WritableValue;
import org.eclipse.jface.databinding.swt.WidgetProperties;
import org.eclipse.jface.databinding.viewers.ObservableListContentProvider;
import org.eclipse.jface.databinding.viewers.ObservableMapLabelProvider;
import org.eclipse.jface.databinding.viewers.ViewerProperties;
import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.Button;

/**
 * This file is autogenerated by Google WindowBuilder Pro
 *
 * @author ezh
 */
public class TranslationLookup extends Dialog {
	public class Translations extends AbstractModelObject {
		private final List<Translation> translations = new ArrayList<Translation>();

		public void addTranslation(Translation translation) {
			translations.add(translation);
			firePropertyChange("translations", null, translations);
		}

		public void removeTranslation(Translation translation) {
			translations.remove(translation);
			firePropertyChange("translations", null, translations);
		}

		public List<Translation> getTranslations() {
			return translations;
		}

	}

	public class Translation {
		private String key = null;
		private String value = null;

		public String getKey() {
			return key;
		}

		public void setKey(String key) {
			this.key = key;
		}

		public String getValue() {
			return value;
		}

		public void setValue(String value) {
			this.value = value;
		}
	}

	private Text textFilter;
	private Table table;
	private Translations translations = new Translations();
	private TableViewer tableViewer;
	private WritableValue selectedTranslation = new WritableValue();
	private WritableValue filter = new WritableValue();
	private TableViewerColumn tableViewerColumnKey;
	private TableViewerColumn tableViewerColumnValue;

	/**
	 * Create the dialog.
	 *
	 * @param parentShell
	 */
	public TranslationLookup(Shell parentShell) {
		super(parentShell);
	}

	/**
	 * Create contents of the dialog.
	 *
	 * @param parent
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		Composite container = (Composite) super.createDialogArea(parent);
		container.setLayout(new GridLayout(1, false));

		Label lblFilterLabel = new Label(container, SWT.NONE);
		lblFilterLabel.setText(Messages.lookupFilter_text);

		textFilter = new Text(container, SWT.BORDER);
		textFilter.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true,
				false, 1, 1));

		tableViewer = new TableViewer(container, SWT.BORDER
				| SWT.FULL_SELECTION);
		table = tableViewer.getTable();
		table.setHeaderVisible(true);
		table.setLinesVisible(true);
		table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));

		tableViewerColumnKey = new TableViewerColumn(tableViewer, SWT.NONE);
		TableColumn tblclmnTranlsationKey = tableViewerColumnKey.getColumn();
		tblclmnTranlsationKey.setWidth(100);
		tblclmnTranlsationKey.setText(Messages.key_text);

		tableViewerColumnValue = new TableViewerColumn(
				tableViewer, SWT.NONE);
		TableColumn tblclmnTranslationValue = tableViewerColumnValue
				.getColumn();
		tblclmnTranslationValue.setWidth(100);
		tblclmnTranslationValue.setText(Messages.value_text);

		return container;
	}

	/**
	 * Create contents of the button bar.
	 *
	 * @param parent
	 */
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		Button button = createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL,
				true);
		button.setEnabled(false);
		createButton(parent, IDialogConstants.CANCEL_ID,
				IDialogConstants.CANCEL_LABEL, false);
		initDataBindings();
	}

	protected Translations getTranslations() {
		return translations;
	}

	protected WritableValue getSelectedTranslation() {
		return selectedTranslation;
	}

	protected WritableValue getFilter() {
		return filter;
	}

	protected TableViewerColumn getTableViewerColumnKey() {
		return tableViewerColumnKey;
	}

	protected TableViewerColumn getTableViewerColumnValue() {
		return tableViewerColumnValue;
	}

	protected TableViewer getTableViewer() {
		return tableViewer;
	}

	protected DataBindingContext initDataBindings() {
		DataBindingContext bindingContext = new DataBindingContext();
		//
		ObservableListContentProvider listContentProvider = new ObservableListContentProvider();
		IObservableMap[] observeMaps = PojoObservables.observeMaps(
				listContentProvider.getKnownElements(), Translation.class,
				new String[] { "key", "value" });
		tableViewer
				.setLabelProvider(new ObservableMapLabelProvider(observeMaps));
		tableViewer.setContentProvider(listContentProvider);
		//
		IObservableList translationsTranslationsObserveList = BeanProperties
				.list("translations").observe(translations);
		tableViewer.setInput(translationsTranslationsObserveList);
		//
		IObservableValue observeSingleSelectionTableViewer = ViewerProperties
				.singleSelection().observe(tableViewer);
		bindingContext.bindValue(observeSingleSelectionTableViewer,
				selectedTranslation, null, null);
		//
		IObservableValue observeTextTextFilterObserveWidget = WidgetProperties
				.text(SWT.Modify).observeDelayed(50, textFilter);
		bindingContext.bindValue(observeTextTextFilterObserveWidget, filter,
				null, null);
		//
		return bindingContext;
	}
}
